// ‚úÖ VERS√ÉO FRONTEND SEGURA - Usa apenas ANON_KEY + RLS
// Este arquivo √© bundlado pelo Vite e √© seguro para frontend
import { supabase } from './supabaseClient'; // ‚úÖ Apenas ANON_KEY
// Fun√ß√£o para obter vari√°veis de ambiente do frontend (VITE_*)
function getEnvVar(name) {
    if (typeof window !== 'undefined' && import.meta?.env) {
        return import.meta.env[`VITE_${name}`];
    }
    return undefined;
}
/**
 * ‚úÖ FRONTEND: Buscar dom√≠nios de email dispon√≠veis via RLS
 * Usa supabase (ANON_KEY) + pol√≠tica RLS "admin_full_access_email_domains"
 */
export async function getAvailableEmailDomains() {
    try {
        console.log('üîß [Frontend] Buscando dom√≠nios de email via RLS...');
        const { data, error } = await supabase
            .from('email_domains')
            .select('*')
            .eq('is_active', true)
            .order('is_default', { ascending: false })
            .order('domain_name');
        if (error) {
            console.error('‚ùå [Frontend] Erro ao buscar dom√≠nios:', error);
            // Fallback: retornar configura√ß√£o padr√£o das vari√°veis de ambiente
            const defaultDomain = {
                id: 'env-default',
                domain_name: getEnvVar('FROM_EMAIL')?.split('@')[1] || 'viaforteexpress.com',
                resend_api_key: getEnvVar('RESEND_API_KEY') || '',
                is_active: true,
                is_default: true,
                from_name: getEnvVar('FROM_NAME') || 'VIA FORTE EXPRESS',
                from_email: getEnvVar('FROM_EMAIL') || 'contato@viaforteexpress.com',
                reply_to_email: getEnvVar('SUPPORT_EMAIL') || 'suporte@viaforteexpress.com',
                // client_id: null, // Removido - n√£o faz parte do tipo EmailDomain
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString(),
            };
            return [defaultDomain];
        }
        return data || [];
    }
    catch (error) {
        console.error('‚ùå [Frontend] Exce√ß√£o ao buscar dom√≠nios:', error);
        // Fallback seguro usando vari√°veis de ambiente
        return [{
                id: 'env-fallback',
                domain_name: getEnvVar('FROM_EMAIL')?.split('@')[1] || 'viaforteexpress.com',
                resend_api_key: getEnvVar('RESEND_API_KEY') || '',
                is_active: true,
                is_default: true,
                from_name: getEnvVar('FROM_NAME') || 'VIA FORTE EXPRESS',
                from_email: getEnvVar('FROM_EMAIL') || 'contato@viaforteexpress.com',
                reply_to_email: getEnvVar('SUPPORT_EMAIL') || 'suporte@viaforteexpress.com',
                // client_id: null, // Removido - n√£o faz parte do tipo EmailDomain
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString(),
            }];
    }
}
/**
 * ‚úÖ FRONTEND: Validar chave API do Resend (teste b√°sico)
 * N√£o usa banco de dados - apenas valida√ß√£o de formato
 */
export async function validateResendApiKey(apiKey) {
    try {
        console.log('üîß [Frontend] Validando API key Resend...');
        // Valida√ß√£o b√°sica de formato
        if (!apiKey || typeof apiKey !== 'string') {
            return {
                valid: false,
                error: 'API key √© obrigat√≥ria',
                details: null
            };
        }
        if (!apiKey.startsWith('re_')) {
            return {
                valid: false,
                error: 'API key deve come√ßar com "re_"',
                details: null
            };
        }
        if (apiKey.length < 20) {
            return {
                valid: false,
                error: 'API key muito curta',
                details: null
            };
        }
        // Para valida√ß√£o completa, o backend deve fazer teste real
        return {
            valid: true,
            error: undefined,
            details: 'API key com formato v√°lido. Teste completo feito no backend.'
        };
    }
    catch (error) {
        console.error('‚ùå [Frontend] Erro na valida√ß√£o:', error);
        return {
            valid: false,
            error: error instanceof Error ? error.message : 'Erro desconhecido',
            details: error
        };
    }
}
/**
 * ‚ö†Ô∏è FUN√á√ÉO PLACEHOLDER: sendTrackingEmail
 * Esta fun√ß√£o requer backend para envio real de email
 * Frontend deve fazer chamada para API endpoint
 */
export async function sendTrackingEmail(data) {
    console.warn('‚ö†Ô∏è [Frontend] sendTrackingEmail deve ser movida para API backend');
    console.log('üí° Use: fetch("/api/send-tracking-email", { method: "POST", body: JSON.stringify(data) })');
    throw new Error('sendTrackingEmail deve ser executada no backend via API endpoint');
}
/**
 * ‚úÖ FRONTEND: Placeholder para configura√ß√£o de email
 * Usa apenas vari√°veis de ambiente p√∫blicas
 */
export async function getEmailConfig() {
    return {
        fromName: getEnvVar('FROM_NAME') || 'VIA FORTE EXPRESS',
        fromEmail: getEnvVar('FROM_EMAIL') || 'contato@viaforteexpress.com',
        replyToEmail: getEnvVar('SUPPORT_EMAIL') || 'suporte@viaforteexpress.com',
        resendApiKey: getEnvVar('RESEND_API_KEY') || '', // P√∫blico no frontend
    };
}
console.log('‚úÖ emailService-frontend.ts carregado (frontend seguro)');
//# sourceMappingURL=emailService-frontend.js.map
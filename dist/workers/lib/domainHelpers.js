// src/lib/domainHelpers.ts
// Fun√ß√µes helper para sele√ß√£o inteligente de dom√≠nios por tipo de oferta
import { supabaseAdmin } from './server/supabaseAdmin';
// Fun√ß√µes locais para substituir as que estavam no emailService
async function getAvailableEmailDomains() {
    const { data } = await supabaseAdmin.from('email_domains').select('*');
    return data || [];
}
async function getDefaultEmailDomain() {
    const { data } = await supabaseAdmin.from('email_domains').select('*').eq('is_default', true).single();
    return data;
}
/**
 * Mapeia palavras-chave para sugest√µes de dom√≠nio
 */
const DOMAIN_KEYWORDS_MAP = {
    farmacia: ['farmacia', 'medicamento', 'remedio', 'saude', 'droga', 'vitamina'],
    imobiliaria: ['casa', 'apartamento', 'imovel', 'terreno', 'aluguel', 'venda'],
    loja: ['produto', 'compra', 'venda', 'shopping', 'store', 'comercio'],
    financeira: ['emprestimo', 'financiamento', 'credito', 'banco', 'cartao'],
    educacao: ['curso', 'escola', 'ensino', 'educacao', 'formacao', 'treinamento'],
    tecnologia: ['software', 'app', 'sistema', 'digital', 'online', 'tech'],
    consultoria: ['consultoria', 'servico', 'assessoria', 'consultante', 'expert'],
    ecommerce: ['ecommerce', 'loja virtual', 'marketplace', 'vendas online']
};
/**
 * Analisa o texto da oferta e sugere dom√≠nios baseado em palavras-chave
 * @param offerText Texto da oferta para an√°lise
 * @param description Descri√ß√£o adicional (opcional)
 * @returns Promise<DomainSelectionOption[]> Lista de dom√≠nios sugeridos
 */
export async function suggestDomainByOfferType(offerText, description) {
    console.log(`ü§ñ [suggestDomainByOfferType] Analisando oferta: "${offerText}"`);
    try {
        // Obter todos os dom√≠nios dispon√≠veis
        const domains = await getAvailableEmailDomains();
        if (domains.length === 0) {
            console.warn('‚ùå Nenhum dom√≠nio encontrado');
            return [];
        }
        // Combinar textos para an√°lise
        const fullText = `${offerText} ${description || ''}`.toLowerCase();
        const suggestions = [];
        // Analisar cada categoria de palavra-chave
        for (const [category, keywords] of Object.entries(DOMAIN_KEYWORDS_MAP)) {
            const matchCount = keywords.filter(keyword => fullText.includes(keyword)).length;
            if (matchCount > 0) {
                console.log(`üéØ [suggestDomainByOfferType] Categoria detectada: ${category} (${matchCount} matches)`);
                // Buscar dom√≠nios que contenham a categoria no nome
                const categoryDomains = domains.filter(domain => domain.domain_name.toLowerCase().includes(category) ||
                    domain.from_name.toLowerCase().includes(category));
                categoryDomains.forEach(domain => {
                    suggestions.push({
                        id: domain.id,
                        label: `${domain.from_name} (${domain.domain_name})`,
                        description: `Recomendado para ${category} - ${matchCount} palavra(s) relacionada(s)`,
                        domain_name: domain.domain_name,
                        is_default: domain.is_default
                    });
                });
            }
        }
        // Sempre incluir dom√≠nio padr√£o como op√ß√£o
        const defaultDomain = domains.find(d => d.is_default);
        if (defaultDomain && !suggestions.find(s => s.is_default)) {
            suggestions.unshift({
                id: defaultDomain.id,
                label: `${defaultDomain.from_name} (${defaultDomain.domain_name})`,
                description: 'Dom√≠nio padr√£o do sistema',
                domain_name: defaultDomain.domain_name,
                is_default: true
            });
        }
        // Se n√£o h√° sugest√µes espec√≠ficas, retornar todos os dom√≠nios
        if (suggestions.length <= 1) {
            console.log(`üí° [suggestDomainByOfferType] Nenhuma categoria espec√≠fica detectada, listando todos os dom√≠nios`);
            return domains.map(domain => ({
                id: domain.id,
                label: `${domain.from_name} (${domain.domain_name})`,
                description: domain.is_default ? 'Dom√≠nio padr√£o do sistema' : 'Dom√≠nio personalizado',
                domain_name: domain.domain_name,
                is_default: domain.is_default
            }));
        }
        // Ordenar sugest√µes (dom√≠nio padr√£o primeiro, depois por relev√¢ncia)
        suggestions.sort((a, b) => {
            if (a.is_default)
                return -1;
            if (b.is_default)
                return 1;
            return 0;
        });
        console.log(`‚úÖ [suggestDomainByOfferType] ${suggestions.length} sugest√µes geradas`);
        return suggestions;
    }
    catch (error) {
        console.error('‚ùå [suggestDomainByOfferType] Erro ao sugerir dom√≠nios:', error);
        return [];
    }
}
/**
 * Obt√©m o dom√≠nio recomendado baseado no tipo de oferta
 * @param offerType Categoria da oferta (farmacia, imobiliaria, etc.)
 * @returns Promise<EmailDomain | null> Dom√≠nio recomendado
 */
export async function getRecommendedDomainByType(offerType) {
    try {
        const domains = await getAvailableEmailDomains();
        // Buscar dom√≠nio que corresponde ao tipo
        const matchedDomain = domains.find(domain => domain.domain_name.toLowerCase().includes(offerType.toLowerCase()) ||
            domain.from_name.toLowerCase().includes(offerType.toLowerCase()));
        if (matchedDomain) {
            console.log(`üéØ [getRecommendedDomainByType] Dom√≠nio encontrado para ${offerType}: ${matchedDomain.domain_name}`);
            return matchedDomain;
        }
        // Se n√£o encontrou, retornar dom√≠nio padr√£o
        console.log(`üí° [getRecommendedDomainByType] Nenhum dom√≠nio espec√≠fico para ${offerType}, usando padr√£o`);
        return await getDefaultEmailDomain();
    }
    catch (error) {
        console.error('‚ùå [getRecommendedDomainByType] Erro:', error);
        return null;
    }
}
/**
 * Valida se um dom√≠nio pode ser usado para um tipo espec√≠fico de oferta
 * @param domainId ID do dom√≠nio
 * @param offerType Tipo da oferta
 * @returns Promise<boolean> Se o dom√≠nio √© adequado
 */
export async function validateDomainForOfferType(domainId, offerType) {
    try {
        const domains = await getAvailableEmailDomains();
        const domain = domains.find(d => d.id === domainId);
        if (!domain) {
            console.warn(`‚ö†Ô∏è [validateDomainForOfferType] Dom√≠nio ${domainId} n√£o encontrado`);
            return false;
        }
        if (!domain.is_active) {
            console.warn(`‚ö†Ô∏è [validateDomainForOfferType] Dom√≠nio ${domain.domain_name} est√° inativo`);
            return false;
        }
        // Dom√≠nio padr√£o sempre √© v√°lido
        if (domain.is_default) {
            return true;
        }
        // Verificar se o dom√≠nio √© adequado para o tipo de oferta
        const keywords = DOMAIN_KEYWORDS_MAP[offerType.toLowerCase()] || [];
        const isRelevant = keywords.some(keyword => domain.domain_name.toLowerCase().includes(keyword) ||
            domain.from_name.toLowerCase().includes(keyword));
        console.log(`üîç [validateDomainForOfferType] Dom√≠nio ${domain.domain_name} ${isRelevant ? '√â' : 'N√ÉO √©'} adequado para ${offerType}`);
        return true; // Permitir qualquer dom√≠nio ativo, mas logar adequa√ß√£o
    }
    catch (error) {
        console.error('‚ùå [validateDomainForOfferType] Erro:', error);
        return false;
    }
}
/**
 * Gera op√ß√µes de sele√ß√£o formatadas para uso em dropdowns
 * @param includeDefault Se deve incluir op√ß√£o "usar padr√£o"
 * @returns Promise<Array<{value: string, label: string, description?: string}>>
 */
export async function getDomainSelectionOptions(includeDefault = true) {
    try {
        const domains = await getAvailableEmailDomains();
        const options = [];
        // Op√ß√£o para usar dom√≠nio padr√£o automaticamente
        if (includeDefault) {
            options.push({
                value: '',
                label: 'üè† Usar dom√≠nio padr√£o (viaforteexpress.com)',
                description: 'Configura√ß√£o padr√£o do sistema',
                isDefault: true
            });
        }
        // Adicionar dom√≠nios personalizados
        domains
            .filter(domain => !domain.is_default) // Excluir dom√≠nio padr√£o da lista
            .forEach(domain => {
            options.push({
                value: domain.id,
                label: `üìß ${domain.domain_name} - ${domain.from_name}`,
                description: `Email: ${domain.from_email}`,
                isDefault: false
            });
        });
        return options;
    }
    catch (error) {
        console.error('‚ùå [getDomainSelectionOptions] Erro:', error);
        return includeDefault ? [{
                value: '',
                label: 'üè† Usar dom√≠nio padr√£o (viaforteexpress.com)',
                description: 'Configura√ß√£o padr√£o do sistema',
                isDefault: true
            }] : [];
    }
}
/**
 * Obt√©m estat√≠sticas de uso de dom√≠nios
 * @returns Promise<Array<{domainId: string, domainName: string, usageCount: number}>>
 */
export async function getDomainUsageStats() {
    try {
        // Esta fun√ß√£o pode ser expandida para incluir estat√≠sticas reais
        // Por enquanto, retorna dados b√°sicos dos dom√≠nios
        const domains = await getAvailableEmailDomains();
        return domains.map(domain => ({
            domainId: domain.id,
            domainName: domain.domain_name,
            usageCount: 0, // TODO: Implementar contagem real de campanhas
            lastUsed: undefined // TODO: Implementar data da √∫ltima campanha
        }));
    }
    catch (error) {
        console.error('‚ùå [getDomainUsageStats] Erro:', error);
        return [];
    }
}
/**
 * Fun√ß√£o utilit√°ria para log de uso de dom√≠nio
 * @param domainId ID do dom√≠nio usado
 * @param campaignType Tipo da campanha ('small' | 'large')
 * @param leadCount N√∫mero de leads na campanha
 */
export async function logDomainUsage(domainId, campaignType, leadCount) {
    try {
        // Log b√°sico - pode ser expandido para uma tabela espec√≠fica
        console.log(`üìä [logDomainUsage] Dom√≠nio ${domainId} usado em campanha ${campaignType} com ${leadCount} leads`);
        // TODO: Implementar logging em tabela espec√≠fica se necess√°rio
        // await supabaseAdminAdmin.from('domain_usage_logs').insert({
        //   domain_id: domainId,
        //   campaign_type: campaignType,
        //   lead_count: leadCount,
        //   used_at: new Date().toISOString()
        // });
    }
    catch (error) {
        console.error('‚ùå [logDomainUsage] Erro ao registrar uso:', error);
    }
}
//# sourceMappingURL=domainHelpers.js.map
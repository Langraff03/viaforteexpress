// src/lib/supabaseClient.js
import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';
import * as path from 'path';
import * as fs from 'fs';

// Verificar se estamos em ambiente Vite ou Node.js puro
const isViteEnv = typeof import.meta !== 'undefined' && import.meta.env;

// Carregar variáveis de ambiente do arquivo .env apenas no ambiente Node.js
if (!isViteEnv && typeof process !== 'undefined' && process.cwd && typeof process.cwd === 'function') {
  try {
    const envPath = path.resolve(process.cwd(), '.env');
    if (fs.existsSync(envPath)) {
      console.log(`Carregando variáveis de ambiente de ${envPath}`);
      dotenv.config({ path: envPath });
    }
  } catch (error) {
    console.error('Erro ao carregar arquivo .env:', error);
  }
}

// Usar as variáveis de ambiente apropriadas dependendo do ambiente
let supabaseUrl;
let supabaseServiceRoleKey;

if (isViteEnv) {
  supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
  supabaseServiceRoleKey = import.meta.env.VITE_SUPABASE_SERVICE_ROLE_KEY;
} else {
  supabaseUrl = process.env.SUPABASE_URL || process.env.VITE_SUPABASE_URL;
  supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.VITE_SUPABASE_SERVICE_ROLE_KEY;
  
  console.log('Variáveis de ambiente carregadas:');
  console.log(`SUPABASE_URL: ${supabaseUrl ? 'definido' : 'não definido'}`);
  console.log(`SUPABASE_SERVICE_ROLE_KEY: ${supabaseServiceRoleKey ? 'definido' : 'não definido'}`);
}

// Verificar se as variáveis estão definidas
if (!supabaseUrl || !supabaseServiceRoleKey) {
  console.error('Erro: As variáveis de ambiente do Supabase não estão definidas.');
  // Definir valores padrão para evitar erros de tipagem
  supabaseUrl = 'https://mejxvavbvlcynhiespkg.supabase.co';
  supabaseServiceRoleKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1lanh2YXZidmxjeW5oaWVzcGtnIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODk4Nzk4OCwiZXhwIjoyMDY0NTYzOTg4fQ.8ce0_AjRBDVRbA-fOrYtKyFurQmc8N0_nZCjn8GjexY';
}

// Criar clientes - usando a chave de serviço para ambos os clientes para fins de teste
// Em produção, você deve usar a chave anônima para o cliente público
const supabase = createClient(supabaseUrl, supabaseServiceRoleKey);
const supabaseAdmin = createClient(supabaseUrl, supabaseServiceRoleKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

export { supabase, supabaseAdmin };